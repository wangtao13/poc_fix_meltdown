--- arch/x86/kernel/signal.c.orig       2018-01-10 20:23:18.509828049 +0800
+++ arch/x86/kernel/signal.c    2018-02-02 13:03:11.823814419 +0800
@@ -22,6 +22,7 @@
 #include <linux/uaccess.h>
 #include <linux/user-return-notifier.h>
 #include <linux/uprobes.h>
+#include <linux/pagemap.h>
 #include <linux/context_tracking.h>

 #include <asm/processor.h>
@@ -700,6 +701,36 @@
 #endif /* CONFIG_X86_32 || !CONFIG_X86_64 */
 }

+static void clear_process_cache(struct task_struct *p)
+{
+        struct mm_struct *mm;
+        struct vm_area_struct *vma;
+        struct page *page;
+        char *my_page_address;
+        unsigned long uaddr, paddr;
+        long res;
+        unsigned int level;
+        pte_t *pte;
+
+        mm = p->mm;
+        for (vma = mm->mmap; vma; vma = vma->vm_next) {
+                for(uaddr = vma->vm_start; uaddr < vma->vm_end; uaddr += PAGE_SIZE) {
+                        down_read(&p->mm->mmap_sem);
+                        res = get_user_pages(p, mm, uaddr, 1, 0, 1, &page, NULL);
+                        if (res == 1) {
+                               my_page_address = kmap(page);
+                               paddr = (unsigned long)page_address(page);
+                               pte = lookup_address(paddr, &level);
+                               if (pte && (pte_val(*pte) &_PAGE_PRESENT)) {
+                                       clflush_cache_range(my_page_address, PAGE_SIZE);
+                               }
+                               kunmap(page);
+                               put_page(page);
+                       }
+                       up_read(&p->mm->mmap_sem);
+                }
+        }
+}
 /*
  * Note that 'init' is a special process: it doesn't get signals it doesn't
  * want to handle. Thus you cannot kill init even with a SIGKILL even by
@@ -712,6 +743,9 @@
        if (get_signal(&ksig)) {
                /* Whee! Actually deliver the signal.  */
                handle_signal(&ksig, regs);
+               if (ksig.sig == SIGSEGV) {
+                       clear_process_cache(current);
+                }
                return;
        }

